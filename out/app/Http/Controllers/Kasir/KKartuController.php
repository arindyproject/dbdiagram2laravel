<?php 
//Generated by ArindyProject -> https://github.com/arindyproject/dbdiagram2laravel 
namespace App\Http\Controllers\Kasir; 

use App\Http\Controllers\Controller; 
use Illuminate\Http\Request; 
use Illuminate\Support\Facades\Auth; 
use Illuminate\Support\Facades\Validator; 
 
use App\Http\Resources\BaseResource; 
use App\Http\Resources\Kasir\KKartuResource; 
use App\Models\Kasir\KKartu; 
 
Class KKartuController extends Controller { 
    //construct----------------------------------------------
    public function __construct(){
        $this->title = "KKartu";
        $this->model = new KKartu;
        $this->res   = new KKartuResource(null);
    }
    //end_construct------------------------------------------


    //roles--------------------------------------------------
    protected function getValidationRules($id = null){ 
        return[
            "kode_member" => "required|string|max:255|unique:k_kartu" .($id ? ',kode_member,' . $id . ',id'  : ''), 
            "id_user"     => "required|integer" , 
        ]; 
    }
    //end_roles----------------------------------------------


    //list with search functionality-----------------------------------
    public function search(Request $request){
        // Retrieve a list of all data with "id" as value and "name" as label.
        // Allows filtering with a search query using the LIKE operator.
        // If the "name" field is unavailable, it will use the second column after "id".
        try {
            // Get search parameter from the request
            //-----------------------------------------------
            $search = $request->input("q", "");

            // Query the database to select "id" and the appropriate name field, with optional search filter
            //-----------------------------------------------
            $record = $this->model->select("id", "kode_member")
                ->when($search, function ($query) use ($search) {
                    $query->where("kode_member", "LIKE", "%" . $search . "%");
                })
                ->get();
            //-----------------------------------------------

            // Check if any records are found
            //-----------------------------------------------
            if ($record->count() < 1) {
                return response(
                    new BaseResource(false, "No matching data found"),
                    404
                );
            }
            //-----------------------------------------------

            // Map the data to a key-value structure (value = id, name = name)
            //-----------------------------------------------
            $data = $record->map(function ($item) {
                return [
                    "value" => $item->id,
                    "name"  => $item->kode_member ?? "Unnamed"
                ];
            });
            //-----------------------------------------------

            // Return the mapped data as a successful response
            //-----------------------------------------------
            return response(
                new BaseResource(true, "Data retrieved successfully", $data),
                200
            );
        } catch (\Exception $e) {
            // Handle any exceptions that occur during the process
            //-----------------------------------------------
            return response(
                new BaseResource(false, "An error occurred while retrieving data: (" . $e->getMessage() . ")"),
                442
            );
        }
    }
    //end_list with search functionality-------------------------------


    //list---------------------------------------------------
    public function list(){
        // Retrieve a list of all data with "id" as value and "name" as label.
        // If the "name" or "nama" field is unavailable, it will use the second column after "id".
        try {
            // Query the database to select "id" and the appropriate name field
            //-----------------------------------------------
            $record = $this->model->select("id", "kode_member")->get();
            //-----------------------------------------------
            // Check if any records are found
            if ($record->count() < 1) {
                return response(
                    new BaseResource(false, "Data not found"),
                    404
                );
            }
            //-----------------------------------------------

            // Map the data to a key-value structure (value = id, name = name)
            //-----------------------------------------------
            $data = $record->map(function ($item) {
                return [
                    "value" => $item->id,
                    "name"  => $item->kode_member ?? "Unnamed"
                ];
            });
            //-----------------------------------------------
            // Return the mapped data as a successful response
            return response(
                new BaseResource(true, "Data retrieved successfully", $data),
                200
            );
        } catch (\Exception $e) {
            // Handle any exceptions that occur during the process
            //-----------------------------------------------
            return response(
                new BaseResource(false, "An error occurred while retrieving data: (" . $e->getMessage() . ")"),
                442
            );
        }
    }
    //end_list-----------------------------------------------


    //show---------------------------------------------------
    public function show($id){
        try {
            // Find the record by ID
            //-----------------------------------------------
            $record = $this->model->find($id);
            if (!$record) {
                return response(
                    new BaseResource(false, "Data not found for ID: " . $id),
                    404
                );
            }
            //-----------------------------------------------

            // Return the record directly
            //-----------------------------------------------
            return response(
                new BaseResource(true, "Data successfully retrieved.", $this->res->make($record) )
            , 200);
            //-----------------------------------------------
        } catch (\Exception $e) {
            // Handle any errors during retrieval
            return response(
                new BaseResource(false, "An error occurred while retrieving data: (" . $e->getMessage() . ")")
            , 442);
        }
    }
    //end_show-----------------------------------------------


    //create-------------------------------------------------
    public function create(Request $request){
        try {
            //validation input
            //-----------------------------------------------
            $validator = Validator::make($request->all(), $this->getValidationRules() ); 
            if ($validator->fails()) { 
                return response( 
                    new BaseResource(false, 
                        $this->title . " => Input error occurred!!, while adding data", 
                        [], $validator->errors()
                ), 442); 
            } 
            //-----------------------------------------------

            //add new data
            //-----------------------------------------------
            $record = $this->model->create($request->all());
            if(!$record){
                return response(new BaseResource(false, "Failed to create data."), 442);
            }
            return response(new BaseResource(true, "Data created successfully.", $this->res->make($record) ), 200);
            //-----------------------------------------------
        } catch (\Exception $e) {
            // Handle any errors during retrieval
            return response(
                new BaseResource(false, "An error occurred while creating data: (" . $e->getMessage() . ")")
            , 442);
        }
    }
    //end_create---------------------------------------------


    //update-------------------------------------------------
    public function update(Request $request, $id){
        try {
            // Find the record by ID
            $record = $this->model->find($id);
            if (!$record) {
                return response(
                    new BaseResource(false, "Data not found for ID: " . $id),
                    404
                );
            }
            //-----------------------------------------------
            
            //validation input
            //-----------------------------------------------
            $validator = Validator::make($request->all(), $this->getValidationRules($id) ); 
            if ($validator->fails()) { 
                return response( 
                    new BaseResource(false, 
                        $this->title . " => Input error occurred!!, while adding data", 
                        [], $validator->errors()
                ), 442); 
            } 
            //-----------------------------------------------

            //update data
            //-----------------------------------------------
            if(!$record->update($request->all()) ){
                return response(new BaseResource(false, "Failed to update data."), 442);
            }
            return response(new BaseResource(true, "Data updated successfully.", $this->res->make($record) ), 200);
            //-----------------------------------------------
        } catch (\Exception $e) {
            // Handle any errors during retrieval
            return response(
                new BaseResource(false, "An error occurred while updating data: (" . $e->getMessage() . ")")
            , 442);
        }
    }
    //end_update---------------------------------------------


    //delete-------------------------------------------------
    public function delete($id){
        try {
            // Find the record by ID
            //-----------------------------------------------
            $record = $this->model->find($id);
            if (!$record) {
                return response(
                    new BaseResource(false, "Data not found for ID: " . $id),
                    404
                );
            }
            //-----------------------------------------------

            // Attempt to delete the record
            //-----------------------------------------------
            if ($record->delete()) {
                // Return success response
                return response(
                    new BaseResource(true, "Data successfully deleted.")
                , 200);
            } else {
                // Return failure response if delete failed
                return response(
                    new BaseResource(false, "Failed to delete the data.")
                , 500);
            }
            //-----------------------------------------------
        } catch (\Exception $e) {
            // Handle any errors during deletion
            return response(
                new BaseResource(false, "An error occurred while deleting data: (" . $e->getMessage() . ")")
            , 442);
        }
    }
    //end_delete---------------------------------------------


} 
