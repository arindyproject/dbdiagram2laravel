import json, os, shutil, re

class MetaToRoute:
    def __init__(self, json_data, dir="", exc=[]):
        """
        Inisialisasi MetaToRes dengan data JSON.
        :param json_data: Data JSON yang berisi definisi tabel.
        """
        if isinstance(json_data, str):
            self.json_data = json.loads(json_data)
        elif isinstance(json_data, dict):  # Sesuaikan jika data berupa list
            self.json_data = json_data
        else:
            raise ValueError("Input harus berupa string JSON atau list dictionary.")

        self.exc = exc
        self.dir = "\\" + dir if dir else ""
    

    def ubah_nama(self,input_text):
        """
        Mengubah teks dengan format snake_case menjadi PascalCase.
        Contoh:
        - "jenis_barang" -> "JenisBarangController"
        """
        if not input_text:
            return ""
        # Pecah teks berdasarkan underscore (_), kapitalisasi setiap kata, lalu gabungkan
        if(input_text.lower() == 'users'):
            return "User" + 'Controller'
        return ''.join(word.capitalize() for word in input_text.split('_')) + 'Controller'
    
    def get_class_rel_dir(self, i):
        return f"App\Http\Controllers{self.dir}\\" + ( i['dir'] + "\\" ) if i['dir'] else f"App\Http\Controllers{self.dir}\\"


    def json_to_model(self, table_data):
        

        #-------------------------------------------------
        mod  = '<?php \n'
        mod += '//Generated by ArindyProject -> https://github.com/arindyproject/dbdiagram2laravel \n'
        mod += '//Copy this code in api.php \n'
        mod += "//require_once __DIR__.'/my_routes.php'; \n"
        mod += 'use Illuminate\Http\Request;\nuse Illuminate\Support\Facades\Route;\n\n'

        for i in table_data:
            if(i['table'] not in self.exc):
                mod +=f'//{i["table"]} -> {self.ubah_nama(i["table"])} \n'
                mod += '//=========================================================================\n'
                mod +=f'use {self.get_class_rel_dir(i)}{self.ubah_nama(i["table"])} ;\n'
                mod += 'Route::controller('+self.ubah_nama(i["table"])+'::class)->prefix("'+ (i['dir'].lower() + "/" if i['dir'] else "") + i["table"] +'")->group(function () { \n'
                mod += "    Route::get('table', 'table');\n"
                mod += "    Route::get('search', 'search');\n"
                mod += "    Route::get('list', 'list');\n"
                mod += "    Route::get('show/{id}', 'show');\n"
                mod += "    Route::post('create', 'create');\n"
                mod += "    Route::put('update/{id}', 'update');\n"
                mod += "    Route::delete('delete/{id}', 'delete');\n"
                mod += '});\n'
                mod += '//=========================================================================\n\n\n'
        mod += '?>'
        #-------------------------------------------------


        return mod
    
    def process_and_save(self):
        # Path ke direktori yang akan dihapus
        models_dir = "out/routes" 

        print('\n\n+=============================================+')
        print('|             Generating Routes               |')
        print('+=============================================+')

        # Hapus direktori jika ada
        if os.path.exists(models_dir):
            shutil.rmtree(models_dir)
            print(f"Direktori {models_dir} berhasil dihapus.")

        table_data = self.json_data['tabels']

        d = self.json_to_model(table_data)
        os.makedirs(models_dir, exist_ok=True)
        output_path = models_dir + '/my_routes.php'
        with open(output_path, "w") as file:
            file.write(d)
        print(f"Route berhasil disimpan di {output_path}")
        
      
        print('+=============================================+')
        if(self.exc):
            print(f"Total pengecualian           : {len(self.exc)}")
            print(f"Memproses dengan pengecualian: {self.exc}")
        
        print('+=============================================+')
