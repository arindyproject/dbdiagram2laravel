import json, os, shutil
from datetime import datetime

class MetaToMigrate:
    def __init__(self, json_data, exc=[]):
        """
        Inisialisasi MetaToSql dengan data JSON.
        :param json_data: Data JSON yang berisi definisi tabel.
        """
        if isinstance(json_data, str):
            self.json_data = json.loads(json_data)
        elif isinstance(json_data, dict):  # Sesuaikan jika data berupa list
            self.json_data = json_data
        else:
            raise ValueError("Input harus berupa string JSON atau list dictionary.")
        
        self.exc = exc

    
    def check_type(self, type, name):
        if( ('id_' in name or '_id' in name) and type == 'bigint'):
            return "unsignedBigInteger('"+name+"')"
        else:
            if('varchar' in type):
                return "string('"+name+"')"
            elif('text' in type):
                return "text('"+name+"')"
            elif('int' in type or "integer" in type):
                return "integer('"+name+"')"
            elif('bigint' in type):
                return "bigInteger('"+name+"')"
            elif('timestamp' in type):
                return "timestamp('"+name+"')"
            elif('bool' in type):
                return "boolean('"+name+"')"
            elif('date' in type):
                return "date('"+name+"')"
            elif('time' in type):
                return "time('"+name+"')"
            elif('decimal' in type):
                vv= type.replace("decimal(","").replace(")","") if "decimal(" in type else ""
                vv= "," + vv if vv else ""
                return "decimal('"+name+"' "+vv+")"
            elif('float' in type):
                vv= type.replace("float(","").replace(")","") if "float(" in type else ""
                vv= "," + vv if vv else ""
                return "float('"+name+"' "+vv+")"
            else:
                return type + "('"+name+"')"
    
    def check_ref_in(self, ref, columns):
        for i in columns:
            if ref == i['name'] and i['type'] == 'bigint' and i['name'] != 'id':
                return True
            
        return False
    

    def json_to_model(self, table_data, refs_data):
        dir        = ( '\\' + table_data["dir"] ).replace('/','\\') if table_data["dir"] else ""
        table_name = table_data["table"]
        columns    = table_data["items"]
        model_name = datetime.today().strftime('%Y_%m_%d_000001_create_') + table_name + "_table"
        #-------------------------------------------------
        mod = '<?php \n'
        mod+= f'//Generated by ArindyProject -> https://github.com/arindyproject/dbdiagram2laravel \n'
        mod+= 'use Illuminate\Database\Migrations\Migration; \n'
        mod+= 'use Illuminate\Database\Schema\Blueprint; \n'
        mod+= 'use Illuminate\Support\Facades\Schema; \n'

        mod+= 'return new class extends Migration{ \n'
        mod+= '    /** \n'
        mod+= '    * Run the migrations. \n'
        mod+= '    */ \n'
        mod+= '    public function up(): void { \n'
        mod+= "        Schema::create('"+table_name+"', function (Blueprint $table) { \n"
        mod+= "            $table->id(); \n"
        mod+= "            //-------------------------------------------------------\n"
        #---------------------------------------------------------------------------
        
        for i in columns:
            if(i['name'] != "id" and i['name'] != "created_at" and i['name'] != "updated_at"):
                nll = "->nullable()" if i['null'] else ""
                unq = "->unique()" if i['is_unique'] else ""
                try:
                    dff = "->default('"+i['default']+"')" 

                except:
                    dff = ""
                    
                mod+= "            $table->"+ self.check_type(i['type'], i['name']) + nll + dff + unq + "; \n"

        
        #---------------------------------------------------------------------------
        mod+= "            //-------------------------------------------------------\n"
        #---------------------------------------------------------------------------
        for i in refs_data:
            if i["tb1"]["name"] == table_name or i["tb2"]["name"] == table_name:
                #mod+= str(i) +'\n'
                if(i["tb1"]["name"] == table_name and self.check_ref_in(i["tb1"]["ref"] , columns) ):
                    mod+= "            $table->foreign('" +i["tb1"]["ref"]+ "')->references('"+i["tb2"]["ref"]+"')->on('"+i["tb2"]["name"]+"')->onDelete('"+i["att"]['delete']+"');\n"
                elif(i["tb2"]["name"] == table_name and self.check_ref_in(i["tb2"]["ref"] , columns) ):
                    mod+= "            $table->foreign('" +i["tb2"]["ref"]+ "')->references('"+i["tb1"]["ref"]+"')->on('"+i["tb1"]["name"]+"')->onDelete('"+i["att"]['delete']+"');\n"
        #---------------------------------------------------------------------------
        mod+= "            //-------------------------------------------------------\n"
        mod+= "            $table->timestamps(); \n"
        mod+= "        });\n"
        mod+= '    } \n\n'
        mod+= '    /** \n'
        mod+= '    * Reverse the migrations. \n'
        mod+= '    */ \n'
        mod+= '    public function down(): void { \n'
        mod+= "        Schema::dropIfExists('"+table_name+"'); \n"
        mod+= '    } \n'
        mod+= '};\n'
        #-------------------------------------------------
        return {
            'table' : table_name,
            'model' : model_name,
            'path'  : '/' + table_data["dir"] if table_data["dir"] else '',
            'class' : mod
        }
    

    def process_and_save(self):
        # Path ke direktori yang akan dihapus
        models_dir = "out/database/migrations"

        print('\n\n+=============================================+')
        print('|           Generating Migrations             |')
        print('+=============================================+')

        # Hapus direktori jika ada
        if os.path.exists(models_dir):
            shutil.rmtree(models_dir)
            print(f"Direktori {models_dir} berhasil dihapus.")

        table_data = self.json_data['tabels']
        refs_data  = self.json_data['refs']
        
        total_file = 0
        for i in table_data:
            if i['table'].lower() not in [exc_item.lower() for exc_item in self.exc]:
                total_file += 1
                d = self.json_to_model(i, refs_data)
                output_dir = models_dir
                
                # Membuat folder jika belum ada
                os.makedirs(output_dir, exist_ok=True)
                
                # Path untuk file model
                output_path = output_dir + "/" + d['model'] + '.php'
                
                # Menulis file model
                with open(output_path, "w") as file:
                    file.write(d['class'])

                print(f"Migrations berhasil disimpan di {output_path}")
                #print(d['class'])
                #print(json.dumps(d, indent=4))
        print('+=============================================+')
        print(f"Total File                   : {total_file}")
        if(self.exc):
            print(f"Total pengecualian           : {len(self.exc)}")
            print(f"Memproses dengan pengecualian: {self.exc}")
        
        print('+=============================================+')