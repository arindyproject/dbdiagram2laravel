import json, os, shutil
class MetaToModel:
    def __init__(self, json_data):
        """
        Inisialisasi MetaToSql dengan data JSON.
        :param json_data: Data JSON yang berisi definisi tabel.
        """
        if isinstance(json_data, str):
            self.json_data = json.loads(json_data)
        elif isinstance(json_data, dict):  # Sesuaikan jika data berupa list
            self.json_data = json_data
        else:
            raise ValueError("Input harus berupa string JSON atau list dictionary.")
    

    def ubah_nama(self,input_text):
        """
        Mengubah teks dengan format snake_case menjadi PascalCase.
        Contoh:
        - "jenis_barang" -> "JenisBarang"
        """
        if not input_text:
            return ""
        # Pecah teks berdasarkan underscore (_), kapitalisasi setiap kata, lalu gabungkan
        return ''.join(word.capitalize() for word in input_text.split('_'))
    

    def json_to_model(self, table_data, refs_data):
        dir        = ( '\\' + table_data["dir"] ).replace('/','\\') if table_data["dir"] else ""
        table_name = table_data["table"]
        columns    = table_data["items"]
        model_name = self.ubah_nama(table_name)
 
        #-------------------------------------------------
        mod = '<?php \n'
        mod+= f'//Generated by ArindyProject -> https://github.com/arindyproject/dbdiagram2laravel \n'
        mod+= f'namespace App\Models{dir}; \n'
        mod+= f'use Illuminate\Database\Eloquent\Factories\HasFactory; \n'
        mod+= f'use Illuminate\Database\Eloquent\Model; \n'
        mod+= 'Class ' + model_name+ ' extends Model { \n'
        mod+= '    use HasFactory; \n'
        mod+= f"    protected $table = '{table_name}'; \n"
        mod+= '    protected $fillable = [ \n'
        #-------------------------------------------------
        for i in columns:
            if(i['name'] != 'created_at' or i['name'] != 'updated_at' ):
                mod +=f'        "{i['name']}", \n'

        mod+= '    ]; \n'
        #-------------------------------------------------
        #-------------------------------------------------
        for i in refs_data:
            if(i["tb1"]["name"] == table_name or i["tb2"]["name"] == table_name):
                mod += f"{i['tb1']['name']} {i['mark']} {i['tb2']['name']} \n"
                
        #-------------------------------------------------
        #-------------------------------------------------
        mod+= '} \n'
        #-------------------------------------------------
        return {
            'table' : table_name,
            'model' : model_name,
            'path'  : '/' + table_data["dir"] if table_data["dir"] else '',
            'class' : mod
        }
    
    def process_and_save(self):
        # Path ke direktori yang akan dihapus
        models_dir = "out/app/Models"

        # Hapus direktori jika ada
        if os.path.exists(models_dir):
            shutil.rmtree(models_dir)
            print(f"Direktori {models_dir} berhasil dihapus.")

        table_data = self.json_data['tabels']
        refs_data = self.json_data['refs']

        for i in table_data:
            d = self.json_to_model(i, refs_data)
            output_dir = os.path.join(models_dir, d['path'])
            
            # Membuat folder jika belum ada
            os.makedirs(output_dir, exist_ok=True)
            
            # Path untuk file model
            output_path = os.path.join(output_dir, d['model'] + '.php')
            
            # Menulis file model
            with open(output_path, "w") as file:
                file.write(d['class'])

            print(f"Model berhasil disimpan di {output_path}")
            print(d['class'])
            #print(json.dumps(d, indent=4))