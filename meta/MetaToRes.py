import json, shutil, os

class MetaToRes:
    def __init__(self, json_data, exc=[]):
        """
        Inisialisasi MetaToRes dengan data JSON.
        :param json_data: Data JSON yang berisi definisi tabel.
        """
        if isinstance(json_data, str):
            self.json_data = json.loads(json_data)
        elif isinstance(json_data, dict):  # Sesuaikan jika data berupa list
            self.json_data = json_data
        else:
            raise ValueError("Input harus berupa string JSON atau list dictionary.")

        self.exc = exc

    def ubah_nama(self,input_text):
        """
        Mengubah teks dengan format snake_case menjadi PascalCase.
        Contoh:
        - "jenis_barang" -> "JenisBarang"
        """
        if not input_text:
            return ""
        # Pecah teks berdasarkan underscore (_), kapitalisasi setiap kata, lalu gabungkan
        if(input_text.lower() == 'users'):
            return "User" + "Resource"
        return ''.join(word.capitalize() for word in input_text.split('_')) + "Resource"
    
    def get_class_rel_dir(self, table_data, table_name):
        for i in table_data:
            if(i['table'] == table_name):
                return "App\Http\Resources\\" + ( i['dir'] + "\\" ) if i['dir'] else "App\Http\Resources\\"
        return "App\Http\Resources\\"
    

    def cek_out_type(self, i):
        if(i['type'] == 'timestamp'):
            return f'$this->{i["name"]} ? $this->{i["name"]}->format("Y-m-d h:i:s") : ""'
        elif(i['type'] == 'datetime'):
            return f'$this->{i["name"]} ? $this->{i["name"]}->format("Y-m-d h:i:s") : ""'
        elif(i['type'] == 'date'):
            return f'$this->{i["name"]} ? $this->{i["name"]}->format("Y-m-d") : ""'
        elif(i['type'] == 'time'):
            return f'$this->{i["name"]} ? $this->{i["name"]}->format("h:i:s") : ""'
        return f'$this->{i["name"]}'
    

    def json_to_model(self, table_data, refs_data):
        dir        = ( '\\' + table_data["dir"] ).replace('/','\\') if table_data["dir"] else ""
        table_name = table_data["table"]
        columns    = table_data["items"]
        model_name = self.ubah_nama(table_name)
 
        #-------------------------------------------------
        mod = '<?php \n'
        mod+= f'//Generated by ArindyProject -> https://github.com/arindyproject/dbdiagram2laravel \n'
        mod+= f'namespace App\Http\Resources{dir}; \n'
        mod+= f'use Illuminate\Http\Request; \n'
        mod+= f'use Illuminate\Http\Resources\Json\JsonResource; \n\n'
        #-------------------------------------------------
        mod+= 'Class ' + model_name+ ' extends JsonResource { \n'
        mod+= '    /**\n'
        mod+= '    * Transform the resource into an array.\n'
        mod+= '    *\n'
        mod+= '    * @return array<string, mixed>\n'
        mod+= '    */\n'
        #-------------------------------------------------
        mod+= '    public function toArray($request){\n'
        mod+= '        return[\n'
        #-------------------------------------------------
        
        #-------------------------------------------------
        max_length = max(len(i['name']) for i in columns)
        for i in columns:
            out_nya = self.cek_out_type(i)
            mod += f'            "{i["name"]}"{" " * (max_length - len(i["name"]))} => {out_nya}, \n'
        #-------------------------------------------------

        #-------------------------------------------------
        mod+= '        ]; \n'
        mod+= '    } \n'
        #-------------------------------------------------
        mod+= '} \n'
        #-------------------------------------------------
        return {
            'table' : table_name,
            'model' : model_name,
            'path'  : '/' + table_data["dir"] if table_data["dir"] else '',
            'class' : mod
        }
    
    def process_and_save(self):
        # Path ke direktori yang akan dihapus
        models_dir = "out/app/Http/Resources"

        print('\n\n+=============================================+')
        print('|             Generating Resources            |')
        print('+=============================================+')

        # Hapus direktori jika ada
        if os.path.exists(models_dir):
            shutil.rmtree(models_dir)
            print(f"Direktori {models_dir} berhasil dihapus.")

        table_data = self.json_data['tabels']
        refs_data  = self.json_data['refs']
        total_file = 0
        for i in table_data:
            if i['table'].lower() not in [exc_item.lower() for exc_item in self.exc]:
                total_file += 1
                d = self.json_to_model(i, refs_data)
                output_dir = models_dir + d['path']
                
                # Membuat folder jika belum ada
                os.makedirs(output_dir, exist_ok=True)
                
                # Path untuk file model
                output_path = output_dir + "/" + d['model'] + '.php'
                
                # Menulis file model
                with open(output_path, "w") as file:
                    file.write(d['class'])

                print(f"Resources berhasil disimpan di {output_path}")
                #print(d['class'])
                #print(json.dumps(d, indent=4))

        print('+=============================================+')
        print(f"Total File                   : {total_file}")
        if(self.exc):
            print(f"Total pengecualian           : {len(self.exc)}")
            print(f"Memproses dengan pengecualian: {self.exc}")
        
        print('+=============================================+')